@using Microsoft.Extensions.Configuration
@inject IConfiguration config

@model UsersManagementViewModel
@{
    ViewData["Title"] = "Administración";
}

<main role="main">
    <div class="container">
        @if ((TempData["UnauthorizedAction"] as bool?) == true)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong><i class="fas fa-hand-paper"></i> NO AUTORIZADO</strong> No cuenta con los privilegios suficientes para realizar esta acción.
                <button type="button" class="close" data-dismiss="alert" aria-label="cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong><i class="fas fa-heart-broken"></i> HA OCURRIDO UN ERROR</strong> @TempData["Error"]
                <button type="button" class="close" data-dismiss="alert" aria-label="cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (TempData["PasswordResetted"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <strong><i class="fas fa-undo-alt"></i> CONTRASEÑA RESETEADA</strong> Se reseteado satisfactoriamente la contraseña al usuario <b>@TempData["PasswordResetted"]</b>.
                <hr />
                <small>Recuerde que esta contraseña es temporal y se le solicitará cambiarla la próxima vez que inicie sesión.</small>
                <button type="button" class="close" data-dismiss="alert" aria-label="cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (TempData["UserUnknown"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong><i class="fas fa-user-alt-slash"></i> USUARIO DESCONOCIDO</strong> El usuario <b>@TempData["UserUnknown"]</b> no existe en el dominio.
                <button type="button" class="close" data-dismiss="alert" aria-label="cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (TempData["PasswordSetted"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <strong><i class="fas fa-asterisk"></i> CONTRASEÑA ESTABLECIDA</strong> Se establecido satisfactoriamente la contraseña al usuario <b>@TempData["PasswordResetted"]</b>.
                <button type="button" class="close" data-dismiss="alert" aria-label="cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        <h3>Administración</h3>
        <h5>Control de los usuarios del dominio</h5>

        <div class="mt-3">
            <span class="badge badge-primary">
                <i class="fas fa-users"></i> Total de usuarios: <b>@Model.TotalUsers</b>
            </span>
            @if (Model.GetCloseToExpirePasswordUserCount(config.GetValue<int>("passwordExpirationDays")) > 0)
            {
                <span class="badge badge-warning ml-2">
                    <i class="fas fa-exclamation-triangle"></i> Próximos a expirar contraseña: <b>@Model.GetCloseToExpirePasswordUserCount(config.GetValue<int>("passwordExpirationDays"))</b>
                </span>
            }
            @if (Model.GetExpiredPasswordUserCount(config.GetValue<int>("passwordExpirationDays")) > 0)
            {
                <span class="badge badge-danger ml-2">
                    <i class="fas fa-exclamation-circle"></i> Con contraseña expirada: <b>@Model.GetExpiredPasswordUserCount(config.GetValue<int>("passwordExpirationDays"))</b>
                </span>
            }
            @if (Model.GetNeverExpiresPasswordUserCount() > 0)
            {
                <span class="badge badge-secondary ml-2">
                    <i class="fas fa-infinity"></i> Nunca expiran: <b>@Model.GetNeverExpiresPasswordUserCount()</b>
                </span>
            }
            @if (Model.GetPendingToSetPasswordUserCount() > 0)
            {
                <span class="badge badge-info ml-2">
                    <i class="fas fa-clock"></i> Pendientes a establecer: <b>@Model.GetPendingToSetPasswordUserCount()</b>
                </span>
            }
        </div>
        <div class="mt-1 mb-3">
            <span class="badge badge-success">
                <i class="fas fa-globe"></i> Acceso completo a internet <b>@Model.Groups.Sum(group => group.Users.Count(user => user.InternetAccess == InternetAccess.Full))</b>
            </span>
            <span class="badge badge-warning">
                <i class="fas fa-globe"></i> Acceso limitado a internet <b>@Model.Groups.Sum(group => group.Users.Count(user => user.InternetAccess == InternetAccess.Restricted))</b>
            </span>
            <span class="badge badge-light">
                <i class="fas fa-globe"></i> Acceso nacional a internet <b>@Model.Groups.Sum(group => group.Users.Count(user => user.InternetAccess == InternetAccess.National))</b>
            </span>
            <span class="badge badge-dark">
                <i class="fas fa-globe"></i> Sin acceso a internet <b>@Model.Groups.Sum(group => group.Users.Count(user => user.InternetAccess == InternetAccess.None))</b>
            </span>
        </div>

        <div class="table-responsive">
            <table class="table w-100" style="font-size: 12px;">
                <thead class="font-weight-bold">
                    <tr>
                        <th>Nombre completo</th>
                        <th>Nombre de usuario</th>
                        <th>Contraseña expira</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dependency in Model.Groups)
                    {
                        <tr>
                            <td colspan="3" class="justify-content-center">
                                <h5 class="font-weight-bold">@dependency.Description</h5>
                                <span>
                                    <i class="fas fa-users"></i> @dependency.Users.Count
                                </span>
                                @if (dependency.GetCloseToExpirePasswordUserCount(config.GetValue<int>("passwordExpirationDays")) > 0)
                                {
                                    <span class="text-warning ml-2">
                                        <i class="fas fa-exclamation-triangle"></i> @dependency.GetCloseToExpirePasswordUserCount(config.GetValue<int>("passwordExpirationDays"))
                                    </span>
                                }
                                @if (dependency.GetExpiredPasswordUserCount(config.GetValue<int>("passwordExpirationDays")) > 0)
                                {
                                    <span class="text-danger ml-2">
                                        <i class="fas fa-exclamation-circle"></i> @dependency.GetExpiredPasswordUserCount(config.GetValue<int>("passwordExpirationDays"))
                                    </span>
                                }
                                @if (dependency.GetNeverExpiresPasswordUserCount() > 0)
                                {
                                    <span class="text-muted ml-2">
                                        <i class="fas fa-infinity"></i> @dependency.GetNeverExpiresPasswordUserCount()
                                    </span>
                                }
                                @if (dependency.GetPendingToSetPasswordUserCount() > 0)
                                {
                                    <span class="text-info ml-2">
                                        <i class="fas fa-clock"></i> @dependency.GetPendingToSetPasswordUserCount()
                                    </span>
                                }
                                <span class="text-success ml-5">
                                    <i class="fas fa-globe"></i> @dependency.Users.Count(user => user.InternetAccess == InternetAccess.Full)
                                </span>
                                <span class="text-warning ml-2">
                                    <i class="fas fa-globe"></i> @dependency.Users.Count(user => user.InternetAccess == InternetAccess.Restricted)
                                </span>
                                <span class="text-dark ml-2">
                                    <i class="fas fa-globe"></i> @dependency.Users.Count(user => user.InternetAccess == InternetAccess.National)
                                </span>
                                <span class="text-muted ml-2">
                                    <i class="fas fa-times"></i> @dependency.Users.Count(user => user.InternetAccess == InternetAccess.None)
                                </span>
                            </td>
                            <td class="text-right">
                                @if (Model.Groups.Count > 1)
                                {
                                    <a class="btn btn-primary collapser" id="collapser-@dependency.Name" data-toggle="collapse" href="#@dependency.Name" role="button" aria-expanded="false" aria-controls="@dependency.Name">
                                        <span class="fas fa-list"></span>
                                    </a>
                                }
                            </td>
                        </tr>
                        @foreach (var user in dependency.Users.OrderBy(u => u.LastPasswordSet))
                        {
                            <tr class="@(Model.Groups.Count > 1 ? "collapse" : "")" id="@dependency.Name">
                                <td>
                                    @user.DisplayName
                                    @switch (user.InternetAccess)
                                    {
                                        case InternetAccess.Full:
                                            <span class="fa fa-globe text-success" title="Acceso completo a internet"></span>
                                            break;
                                        case InternetAccess.Restricted:
                                            <span class="fa fa-globe text-warning" title="Acceso limitado a internet"></span>
                                            break;
                                        case InternetAccess.National:
                                            <span class="fa fa-globe text-muted" title="Acceso nacional a internet"></span>
                                            break;
                                        default:
                                            <span class="fa fa-times text-muted" title="Sin acceso a internet"></span>
                                            break;
                                    }
                                    @if (!string.IsNullOrEmpty(user.JobTitle))
                                    {
                                        <br />
                                        <span class="text-muted">@user.JobTitle</span>
                                    }
                                </td>
                                <td>@user.AccountName</td>
                                <td class="text-right">
                                    <partial name="_PasswordExpirationDateLabel" model="user" />
                                </td>
                                <td align="right">
                                    <a asp-action="ResetUserPassword" asp-controller="Management" asp-route-accountName="@user.AccountName"><i class="btn btn-info fas fa-undo-alt m-1"></i></a>
                                    <a asp-action="SetUserPassword" asp-controller="Management" asp-route-accountName="@user.AccountName"><i class="btn btn-success fas fa-asterisk m-1"></i></a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</main>